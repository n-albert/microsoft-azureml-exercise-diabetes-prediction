from azureml.core import Workspace, Experiment, ScriptRunConfig, Environment
from azureml.core.conda_dependencies import CondaDependencies
from azureml.core import Model

# Create a Python environment for the experiment
ws = Workspace.from_config()
sklearn_env = Environment("sklearn-env")

# Ensure the required packages are installed
packages = CondaDependencies.create(conda_packages=['scikit-learn', 'pandas', 'numpy', 'joblib', 'pip'],
                                    pip_packages=['azureml-defaults'])
sklearn_env.python.conda_dependencies = packages

# Create a script config
script_config = ScriptRunConfig(source_directory='./training_folder',
                                script='training_script.py',
                                # arguments = ['--reg-rate', 0.1],
                                environment=sklearn_env) 

# Submit the experiment
experiment = Experiment(workspace=ws, name='training-experiment')
run = experiment.submit(config=script_config)
run.wait_for_completion()

# This below code is for Registering a Model from a Run

# Retrieving model files
# "run" is a reference to a completed experiment run

# List the files generated by the experiment
print("We are printing out the names of files generated by the experiment:")
for file in run.get_file_names():
    print(file)

# Download a named file
print("We are downloading a model, from 'outputs' folder.")
run.download_file(name='outputs/model.pkl', output_file_path='model.pkl')

# Below code is register a model from a local file

# model = Model.register(workspace=ws,
#                        model_name='classification_model',
#                        model_path='model.pkl', # local path
#                        description='A classification model',
#                        tags={'data-format': 'CSV'},
#                        model_framework=Model.Framework.SCIKITLEARN,
#                        model_framework_version='0.20.3')

# I will use the run object itself to register the model
print("We are registering a model, from 'outputs' folder.")
run.register_model( model_name='classification_model',
                    model_path='outputs/model.pkl', # run outputs path
                    description='A classification model',
                    tags={'data-format': 'CSV'},
                    model_framework=Model.Framework.SCIKITLEARN,
                    model_framework_version='0.20.3')

# This below code is to view registered models
print("We are listing out the registered models below:")
for model in Model.list(ws):
    # Get model name and auto-generated version
    print(model.name, 'version:', model.version)

print("Thank you!")